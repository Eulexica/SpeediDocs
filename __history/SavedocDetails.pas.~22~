unit SavedocDetails;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComObj, StdCtrls, Menus, DB, ActnList,
  ActnMan, Vcl.ExtCtrls, Vcl.ImgList, Vcl.Buttons, Vcl.ComCtrls, Vcl.DBCtrls,
  SaveDoc, cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters,
  cxContainer, cxEdit, cxTextEdit, cxMaskEdit, cxDropDownEdit, cxLookupEdit,
  cxDBLookupEdit, cxDBLookupComboBox, Outlook2000, cxImageComboBox, cxSpinEdit,
  DBAccess, Ora, MemDS, cxMemo, cxButtonEdit, JvBaseDlg, JvBrowseFolder;

const
     CUSTOMPROPS: array[0..10] of string = ('MatterNo','DocID','Prec_Category','Prec_Classification','Doc_Keywords','Doc_Precedent','Doc_FileName','Doc_Author','Saved_in_DB', 'Doc_Title','Portal_Access');

type
  TfrmSaveDocDetails = class(TForm)
    btnSave: TBitBtn;
    btnClose: TBitBtn;
    ImageList1: TImageList;
    rgStorage: TRadioGroup;
    cbPortalAccess: TCheckBox;
    cbOverwriteDoc: TCheckBox;
    cbLeaveDocOpen: TCheckBox;
    cbNewCopy: TCheckBox;
    lblMatter: TLabel;
    lblDescription: TLabel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    StatusBar: TStatusBar;
    cmbPrecCategory: TcxLookupComboBox;
    cmbClassification: TcxLookupComboBox;
    cmbAuthor: TcxLookupComboBox;
    Label7: TLabel;
    grpTimeEntry: TGroupBox;
    Label8: TLabel;
    Label9: TLabel;
    neUnits: TcxSpinEdit;
    chkCreateTime: TCheckBox;
    qryEmployee: TOraQuery;
    dsEmployee: TOraDataSource;
    qryPrecCategory: TOraQuery;
    dsPrecCategory: TOraDataSource;
    qryPrecClassification: TOraQuery;
    dsPrecClassification: TOraDataSource;
    txtDocName: TcxTextEdit;
    edKeywords: TcxTextEdit;
    memoTimeNarration: TcxMemo;
    memoPrecDetails: TcxMemo;
    cmbTasks: TcxLookupComboBox;
    Label10: TLabel;
    qryScaleCost: TOraQuery;
    dsScaleCost: TOraDataSource;
    btnEditMatter: TcxButtonEdit;
    btnTxtDocPath: TcxButtonEdit;
    BrowseDlg: TJvBrowseForFolderDialog;
    procedure btnCloseClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure rgStorageClick(Sender: TObject);
    procedure btnEditMatterPropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption;
      var Error: Boolean);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnTxtDocPathPropertiesButtonClick(Sender: TObject;
      AButtonIndex: Integer);
    procedure cmbCategoryPropertiesInitPopup(Sender: TObject);
    procedure dockbtnMatterClick(Sender: TObject);
    procedure btnEditMatterExit(Sender: TObject);
    procedure dockbtnDefaultPathClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cbSaveAsPrecedentClick(Sender: TObject);
    procedure chkCreateTimeClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
  private
    { Private declarations }
    nMatter: integer;

    tmpFileName: string;
    FPrec_Category: string;
    tmpdir: string;
    FSavedInDB: string;
    FDocName: string;
    FPrec_Classification: string;
    FDoc_Keywords: string;
    FDoc_Precedent: string;
    FDoc_FileName: string;
    FDoc_Author: string;
    FEditing: boolean;
    FAppType: integer;
    FFileID: string;
    FOldFileID: string;
    FMailSubject: string;
    FReceivedDate: TDateTime;
    FadxLCID: integer;
    FromWord: boolean;
    FIMail: MailItem;
    FromExcel: boolean;
    FTimeNarration: string;
    FSentEmail: boolean;
//    procedure GetDetails;
  public
    { Public declarations }
    AWordProps: array[1..11] of TWordProperties;
    property DocName: string read FDocName;
    property AppType: Integer read FAppType write FAppType;
    property MailSubject: string read FMailSubject write FMailSubject;
    property ReceivedDate: TDateTime read FReceivedDate write FReceivedDate;
    property LadxLCID: integer read FadxLCID write FadxLCID;
    property IMail: MailItem read FIMail write FIMail;
    property TimeNarration: string read FTimeNarration write FTimeNarration;
    property SentEmail: boolean read FSentEmail write FSentEmail default False;
    procedure GetDetails;
  end;

var
  frmSaveDocDetails: TfrmSaveDocDetails;

function ShowDocSave: Integer; StdCall;

implementation

uses
    MatterSearch, SaveDocFunc, ActiveX, WordUnit, OutlookUnit, ExcelUnit,
    PowerPointUnit, SpeediDocs_IMPL, Office2010;

{$R *.dfm}

function ShowDocSave:integer;
var
   frmSaveDocDetails: TfrmSaveDocDetails;
begin
//   Application.Handle := AHandle;
   frmSaveDocDetails := TfrmSaveDocDetails.Create(Application);
   try
      frmSaveDocDetails.ShowModal;
      Result := frmSaveDocDetails.nMatter;
   finally
      FreeAndNil(frmSaveDocDetails);
   end;
end;

procedure TfrmSaveDocDetails.btnCloseClick(Sender: TObject);
var
  Unknown: IUnknown;
  OLEResult: HResult;
  AMacro : string;
begin
   Close;
end;

procedure TfrmSaveDocDetails.FormShow(Sender: TObject);
begin
   if (not Assigned(dmSaveDoc)) then
      dmSaveDoc := TdmSaveDoc.Create(Application);
   try
      if (dmSaveDoc.GetUserID = True) then
      begin
         cbOverWriteDoc.Visible := False;

         qryPrecClassification.Open;
         qryEmployee.Open;
         qryPrecCategory.Open;
         dmSaveDoc.tbDocGroups.Open;
         qryScaleCost.Open;

         cmbAuthor.EditValue := dmSaveDoc.UserCode;
         StatusBar.Panels[0].Text := 'Ver: '+ ReportVersion(SysUtils.GetModuleName(HInstance)) + ' (' +DateTimeToStr(FileDateToDateTime(FileAge(SysUtils.GetModuleName(HInstance))))+')';
         rgStorage.Enabled := (SystemString('DISABLE_SAVE_MODE') = 'N');
      end;
   except
      Exit;
   end;

   FromWord := False;
   case AppType of
      1: begin
            FromExcel := True;
            GetDetails;
         end;
      2: begin
            FromWord := True;
            GetDetails;
         end;
      3: begin
            cbLeaveDocOpen.Checked := False;
            txtDocName.Text := MailSubject;
            cmbAuthor.EditValue := dmSaveDoc.UserCode;
            memoTimeNarration.Text := TimeNarration;
         end;
      4: ;
   end;
   if (FSavedInDB = 'N') or (FSavedInDB = '')  then
   begin
      rgStorage.ItemIndex := SystemInteger('DFLT_DOC_SAVE_OPTION');
      if ((FromWord = True) or (FromExcel = True)) then
         btnTxtDocPath.Text := SystemString('DOC_DEFAULT_DIRECTORY')  // 'DRAG_DEFAULT_DIRECTORY');
      else
         btnTxtDocPath.Text := SystemString('DRAG_DEFAULT_DIRECTORY');
   end;
end;

procedure TfrmSaveDocDetails.btnSaveClick(Sender: TObject);
var
   DocSequence,
   lTask: string;
//   bUsePath: boolean;
   cmbPrecCategoryKeyValue,
   cmbClassificationKeyValue: integer;
begin
   try
      screen.Cursor := crHourGlass;
      if (btnEditMatter.Text = '') then
      begin
         with Application do
         begin
            NormalizeTopMosts;
            MessageBox('Please enter a Matter number.','SpeediDocs',MB_OK+MB_ICONEXCLAMATION);
            RestoreTopMosts;
            exit;
         end;
      end;
      if btnTxtDocPath.Text <> '' then
      begin
         try
            if cmbAuthor.Text = '' then
            begin
               with Application do
               begin
                  NormalizeTopMosts;
                  MessageBox('Please enter an Author.','SpeediDocs',MB_OK+MB_ICONEXCLAMATION);
                  RestoreTopMosts;
                  exit;
               end;
            end;
            dmSaveDoc.orsInsight.StartTransaction;
            dmSaveDoc.qryMatterAttachments.Open;

            FEditing := False;
//            bUsePath := False;
            tmpdir := IncludeTrailingPathDelimiter(GetEnvironmentVariable('TMP'));

            if ((cbOverwriteDoc.Visible)  and
               (not cbOverwriteDoc.Checked)) then
            begin
               dmSaveDoc.qryMatterAttachments.insert;
               dmSaveDoc.qryMatterAttachments.ParamByName('docid').AsInteger := dmSaveDoc.DocID;
            end
            else
            if (not cbOverwriteDoc.Visible) then
            begin
               dmSaveDoc.qryMatterAttachments.Insert;
               dmSaveDoc.qryMatterAttachments.ParamByName('docid').AsInteger := dmSaveDoc.DocID;
            end
            else
            if (cbOverwriteDoc.Checked) then
            begin
               dmSaveDoc.qryMatterAttachments.Edit;
               FEditing := True;
            end;

//            if bUsePath then
//            begin
//               tmpDir := btnTxtDocPath.Text + '\';
//            end;

//            if txtDocName.Text = '' then
//            begin
//               tmpFileName := tmpDir + dmSaveDoc.DocID +'.doc';
//            end
//            else
//            begin
               if btnTxtDocPath.Text = '' then
                  tmpFileName := txtDocName.Text
               else
                  tmpFileName := btnTxtDocPath.Text;

            try
               if cmbPrecCategory.Text = '' then
                  cmbPrecCategoryKeyValue := -1
               else
                  cmbPrecCategoryKeyValue := cmbPrecCategory.EditValue;

               if cmbClassification.Text = '' then
                  cmbClassificationKeyValue := -1
               else
                  cmbClassificationKeyValue := cmbClassification.EditValue;

               case AppType of
                 1: begin
                       SaveExcel(DocSequence, rgStorage.ItemIndex,btnTxtDocPath.Text,
                                 cbNewCopy.Checked, cbOverwriteDoc.Checked,btnEditMatter.Text,
                                 cmbAuthor.EditValue, txtDocName.Text,cmbPrecCategoryKeyValue,
                                 cmbClassificationKeyValue, edKeywords.Text, dmSaveDoc.DocID);
                    end;
                 2: begin
                       SaveDocument(DocSequence, rgStorage.ItemIndex,btnTxtDocPath.Text,
                                    cbNewCopy.Checked, cbOverwriteDoc.Checked,btnEditMatter.Text,
                                    cmbAuthor.EditValue, txtDocName.Text,cmbPrecCategoryKeyValue,
                                    cmbClassificationKeyValue, edKeywords.Text,
                                    cbLeaveDocOpen.Checked, dmSaveDoc.DocID, False, LadxLCID,
                                    lTask, chkCreateTime.Checked, neUnits.Value,
                                    memoTimeNarration.Text);
                    end;
                 3: begin
                       if (cmbTasks.Text <> '') then
                          lTask := cmbTasks.EditValue;
                       SaveOutlookMessage(DocSequence, rgStorage.ItemIndex,btnTxtDocPath.Text,
                                          cbNewCopy.Checked, cbOverwriteDoc.Checked,
                                          btnEditMatter.Text, cmbAuthor.EditValue,
                                          txtDocName.Text,cmbPrecCategoryKeyValue,
                                          cmbClassificationKeyValue, edKeywords.Text,
                                          ReceivedDate, IMail, True, dmSaveDoc.DocID,
                                          chkCreateTime.Checked, memoTimeNarration.Text,
                                          neUnits.Value, SentEmail, lTask);
                    end;
                 4: begin
                       SavePresentation(DocSequence, rgStorage.ItemIndex,btnTxtDocPath.Text,
                                    cbNewCopy.Checked, cbOverwriteDoc.Checked,btnEditMatter.Text,
                                    cmbAuthor.EditValue, txtDocName.Text,cmbPrecCategoryKeyValue,
                                    cmbClassificationKeyValue, edKeywords.Text);
                 end;
               end;
               dmSaveDoc.orsInsight.Commit;
               if (rgStorage.ItemIndex = 0) and (not cbLeaveDocOpen.Checked) then
                  DeleteFile(tmpFileName);
            except
               raise;
            end;

         except
            dmSaveDoc.orsInsight.Rollback;
         end;
         Self.Close;
      end
      else
      with Application do
      begin
         NormalizeTopMosts;
         MessageBox('Please enter a document name.','SpeediDocs',MB_OK+MB_ICONEXCLAMATION);
         RestoreTopMosts;
      end;
   finally
      screen.Cursor := crDefault;
   end;
end;


procedure TfrmSaveDocDetails.rgStorageClick(Sender: TObject);
begin
   case rgStorage.ItemIndex of
      0: begin
            btnTxtDocPath.Visible := False;
            Self.Height := 275;
         end;
      1: begin
            btnTxtDocPath.Visible := True;
            Self.Height := 307;
         end;
   end;
end;

procedure TfrmSaveDocDetails.btnEditMatterPropertiesValidate(
  Sender: TObject; var DisplayValue: Variant; var ErrorText: TCaption;
  var Error: Boolean);
begin
   if string(DisplayValue) <> '' then
   begin
      dmSaveDoc.qryGetMatter.Close;
      dmSaveDoc.qryGetMatter.ParamByName('FILEID').AsString := string(DisplayValue);
      dmSaveDoc.qryGetMatter.Open;
      if dmSavedoc.qryGetMatter.Eof then
         MessageDlg('Invalid Matter Number', mtWarning, [mbOk], 0)
      else
      begin
         nMatter := dmSaveDoc.qryGetMatter.FieldByName('NMATTER').AsInteger;
         FFileID := string(DisplayValue);
//         cmbAuthor.EditValue := TableString('MATTER','NMATTER',nMatter,'AUTHOR');
         cbOverwriteDoc.Enabled := (FOldFileID = FFileID);
         cbNewCopy.Visible := ((FOldFileID <> FFileID) and (FOldFileID <> ''));
      end;
   end;
end;

procedure TfrmSaveDocDetails.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
   Action := caFree;
end;

procedure TfrmSaveDocDetails.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
   dmSaveDoc.tbDocGroups.Close;
   qryPrecClassification.Close;
   qryEmployee.Close;
   qryPrecCategory.Close;
   qryScaleCost.Close;
   dmSaveDoc.orsInsight.Disconnect;
   if Assigned(dmSaveDoc) then
   begin
      FreeAndNil(dmSaveDoc);
   end;
end;

procedure TfrmSaveDocDetails.btnTxtDocPathPropertiesButtonClick(
  Sender: TObject; AButtonIndex: Integer);
begin
   case AButtonIndex of
      0: begin
            if BrowseDlg.Execute then
               btnTxtDocPath.Text := BrowseDlg.Directory
         end;
      1: btnTxtDocPath.Text := SystemString('DRAG_DEFAULT_DIRECTORY');
   end;
end;

procedure TfrmSaveDocDetails.cbSaveAsPrecedentClick(Sender: TObject);
begin
    btnTxtDocPath.Text := SystemString('DOC_DEFAULT_DIRECTORY');
end;

procedure TfrmSaveDocDetails.chkCreateTimeClick(Sender: TObject);
begin
   grpTimeEntry.Enabled := chkCreateTime.Checked;
end;

procedure TfrmSaveDocDetails.cmbCategoryPropertiesInitPopup(
  Sender: TObject);
begin
//   dmSavedoc.qryPrecCategory.Close;
//   dmSavedoc.qryPrecCategory.Open;
end;

procedure TfrmSaveDocDetails.btnEditMatterExit(Sender: TObject);
begin
   if string(btnEditMatter.Text) <> '' then
   begin
      dmSaveDoc.qryGetMatter.Close;
      dmSaveDoc.qryGetMatter.ParamByName('FILEID').AsString := string(btnEditMatter.Text);
      dmSaveDoc.qryGetMatter.Open;
      if dmSavedoc.qryGetMatter.Eof then
         MessageDlg('Invalid Matter Number', mtWarning, [mbOk], 0)
      else
      begin
         nMatter := dmSaveDoc.qryGetMatter.FieldByName('NMATTER').AsInteger;
         FFileID := string(btnEditMatter.Text);
         Label7.Caption := TableString('MATTER','NMATTER',nMatter,'SHORTDESCR');
//         cmbAuthor.EditValue := TableString('MATTER','NMATTER',nMatter,'AUTHOR');
         cbOverwriteDoc.Enabled := (FOldFileID = FFileID);
         cbNewCopy.Visible := ((FOldFileID = FFileID) and (FOldFileID = ''));
      end;
   end;
end;


procedure TfrmSaveDocDetails.dockbtnMatterClick(Sender: TObject);
var
   frmMtrSearch: TfrmMtrSearch;
begin
   try
      FreeAndNil(frmMtrSearch);
      frmMtrSearch := TfrmMtrSearch.Create(nil);
      if (frmMtrSearch.ShowModal = mrOK) then
      begin
         btnEditMatter.Text := frmMtrSearch.tvMattersFILEID.EditValue;   // dmSaveDoc.qryMatters.FieldByName('fileid').AsString;   //  dmSaveDoc.qryMatters.FieldByName('fileid').AsString;
         nMatter := frmMtrSearch.tvMattersNMATTER.EditValue;  // dmSaveDoc.qryMatters.FieldByName('nmatter').AsInteger;
//         cmbAuthor.EditValue := TableString('MATTER','NMATTER',nMatter,'AUTHOR');
         FFileID := btnEditMatter.Text;
         cbOverwriteDoc.Enabled := (FOldFileID = FFileID);
         cbNewCopy.Visible := ((FOldFileID <> FFileID) and (FOldFileID <> ''));
         Label7.Caption := TableString('MATTER','NMATTER',nMatter,'SHORTDESCR');
      end;
   finally
      FreeAndNil(frmMtrSearch);
   end;
end;

procedure TfrmSaveDocDetails.dockbtnDefaultPathClick(Sender: TObject);
begin
   if (FromWord = False) and (FromExcel = False) then
      btnTxtDocPath.Text := SystemString('DRAG_DEFAULT_DIRECTORY')
   else
      btnTxtDocPath.Text := SystemString('DOC_DEFAULT_DIRECTORY');
end;

procedure TfrmSaveDocDetails.GetDetails;
var
  varWord
  ,varDoc
  ,DocProps
  ,OLEvar
  ,Item : OleVariant;
  x
  ,i
  ,Count
  ,nRet: integer;
  Value: OleVariant;
  IProps: DocumentProperties;
  IProp: DocumentProperty;
  PropValue: OleVariant;
  PropName: widestring;
begin
   btnTxtDocPath.Text := SystemString('DOC_DEFAULT_DIRECTORY');
   try
      //*********************************
      if FromWord then
         GetWordApp.ActiveDocument.CustomDocumentProperties.QueryInterface(IID_DocumentProperties, IProps);
      if FromExcel then
         GetExcelApp.ActiveWorkbook.CustomDocumentProperties.QueryInterface(IID_DocumentProperties, IProps);

      if Assigned(IProps) then
      try
         IProps.Get_Count(Count);  //***values already set
         if (Count > 0) then
         begin
           for i := 1 to length(AWordProps) do
           begin
              IProps.Get_Item(i, LadxLCID, IProp);
              if Assigned(IProp) then
              try
                 nRet := IProp.Get_Value(LadxLCID, PropValue);

                 IProp.Get_Name(LadxLCID,PropName);
                 AWordProps[i].PropName := PropName;
                 AWordProps[i].PropValue := PropValue;

                 if AWordProps[I].PropName = 'MatterNo' then
                 begin
                    try
                       FFileID := AWordProps[I].PropValue;
                       FOldFileID := FFileID;
                     except
                       ; //
                     end;
                     btnEditMatter.Text := FFileID;
                     nMatter := TableInteger('MATTER','FILEID',FFileID,'NMATTER');
                     btnEditMatterExit(nil);
                 end;

                 if AWordProps[I].PropName = 'DocID' then
                 begin
                     dmSaveDoc.DocID := StrToInt(AWordProps[I].PropValue);
                     FDocName := TableString('DOC','DOCID', dmSaveDoc.DocID, 'DOC_NAME');
                     if FDocName = '' then
                        FDocName := GetWordApp.ActiveDocument.Name;

                     cbOverWriteDoc.Visible := True;
                 end;

                 if AWordProps[I].PropName = 'Prec_Category_ID' then
                 begin
                     try
                        FPrec_Category := AWordProps[I].PropValue;
                        if FPrec_Category <> '' then
                           cmbPrecCategory.EditValue := FPrec_Category;
                     except
                        ;// in case of errors
                     end;
                 end;

                 if AWordProps[I].PropName = 'Prec_Classification_ID' then
                 begin
                     try
                        FPrec_Classification := AWordProps[I].PropValue;
                        if FPrec_Classification <> '' then
                           cmbClassification.EditValue := FPrec_Classification;
                     except
                        ;// in case it doesnt exist
                     end;
                 end;

                 if AWordProps[I].PropName = 'Doc_Keywords' then
                 begin
                     try
                        FDoc_Keywords := AWordProps[I].PropValue;
                        edKeywords.Text := FDoc_Keywords;
                     except
                        ;// in case it doesnt exist
                     end;
                 end;

                 if AWordProps[I].PropName = 'Doc_Precedent' then
                 begin
                     try
                        FDoc_Precedent := AWordProps[I].PropValue;
                        memoPrecDetails.Text := FDoc_Precedent;
                     except
                        ;// in case it doesnt exist
                     end;
                 end;

                 if AWordProps[I].PropName = 'Doc_FileName' then
                 begin
                     try
                        FDoc_FileName := AWordProps[I].PropValue;
//                        btnTxtDocPath.Text := FDoc_FileName;
                     except
                        ;// in case it doesnt exist
                     end;
                 end;

                 if AWordProps[I].PropName = 'Doc_Title' then
                 begin
                     try
                        TxtDocName.Text := AWordProps[I].PropValue;
                     except
                        ;// in case it doesnt exist
                     end;
                 end;

                 if AWordProps[I].PropName = 'Doc_Author' then
                 begin
                     try
                        FDoc_Author := AWordProps[I].PropValue;
                        cmbAuthor.EditValue := FDoc_Author;
                     except
                        cmbAuthor.EditValue := dmSaveDoc.UserCode;// in case it doesnt exist
                     end;
                 end;

                 if AWordProps[I].PropName = 'Saved_in_DB' then
                 begin
                    FSavedInDB := AWordProps[I].PropValue;
                    if FSavedInDB = 'Y' then
                    begin
                       rgStorage.ItemIndex := 0;
                       btnTxtDocPath.Text := FDocName;
                    end;
                 end;

                 if (txtDocName.Text = '') and (dmSaveDoc.DocID > 0) then
                     txtDocName.Text := TableString('DOC','DOCID', dmSaveDoc.DocID, 'DESCR'); //  DocName;

                 if AWordProps[I].PropName = 'Portal_Access' then
                     cbPortalAccess.Checked := (AWordProps[I].PropValue = 'Y');
              finally
                 IProp := nil;
              end;
           end;
         end;
//           dblGroup.EditValue := tbDocTemplatesEdit.FieldByName('GROUPID').AsInteger;
      finally
         IProps := nil;
      end;
   except
     //
   end;
end;


end.
