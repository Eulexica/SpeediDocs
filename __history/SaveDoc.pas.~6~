unit SaveDoc;

interface

uses
  SysUtils, Classes, DB, DBAccess, MemDS, Dialogs, OraSmart, Ora, OraCall,
  Registry, Forms, Windows, Controls, MemData;

const
   csRegistryRoot = 'Software\Colateral\Axiom\SpeediDocs';


type
   TWordProperties = record
      PropName: variant;
      PropValue: variant;
   end;
   TWordProps = array[0..20] of TWordProperties;

  TdmSaveDoc = class(TDataModule)
    qryFeeInsert: TOraSQL;
    procTemp: TOraStoredProc;
    qryGetMatter: TOraQuery;
    orsInsight: TOraSession;
    qryEmps: TOraQuery;
    qryGetSeq: TOraQuery;
    qryMatterAttachments: TSmartQuery;
    qryGetEntity: TOraQuery;
    qrySysFile: TOraQuery;
    qryTmp: TSmartQuery;
    qryCheckEmail: TOraQuery;
    tbDocGroups: TOraTable;
    qryDoctemplate: TSmartQuery;
    qryFeeTmpInsert: TOraSQL;
    qrySaveEmailAttachments: TOraQuery;
    qryDocs: TSmartQuery;
    dsDocs: TOraDataSource;
    qryMatterList: TOraQuery;
    dsMatterList: TOraDataSource;
    qryMatterDocs: TOraQuery;
    dsMatterDocs: TOraDataSource;
    procedure qryMatterAttachmentsNewRecord(DataSet: TDataSet);
    procedure orsInsightError(Sender: TObject; E: EDAError; var Fail: Boolean);
    procedure qrySaveEmailAttachmentsNewRecord(DataSet: TDataSet);
    procedure orsInsightConnectionLost(Sender: TObject; Component: TComponent;
      ConnLostCause: TConnLostCause; var RetryMode: TRetryMode);
  private
    { Private declarations }
    FUserID : string;
    FEntity : string;
    FDocID   : integer;
    FDefaultTax: string;
    FUserDept: string;
    FAttDocID: string;

    function GetUserCode: string;

  public
    { Public declarations }
    property UserID : string read FUserID write FUserID;
    property Entity : string read FEntity write FEntity;
    property DocID  : integer read FDocID write FDocID;
    property DefaultTax: string read FDefaultTax write FDefaultTax;
    property UserDept: string read FUserDept write FUserDept;
    property UserCode: string read GetUserCode;
    property AttDocID  : string read FAttDocID write FAttDocID;


    function GetUserID: boolean;

    function SystemDate(sField: string): TDateTime;
    function SystemInteger(sField: string): integer;
    function SystemString(sField: string): string;
    function SystemFloat(sField: string): double;
    function GetSeqNumber(sSequence : string) : string;
    function GetEnvVar(const varName : string) : string;
  end;

var
  dmSaveDoc: TdmSaveDoc;

implementation

{$R *.dfm}

uses
   LoginDetails, SaveDocFunc;


procedure TdmSaveDoc.orsInsightConnectionLost(Sender: TObject;
  Component: TComponent; ConnLostCause: TConnLostCause;
  var RetryMode: TRetryMode);
begin
   RetryMode := rmReconnectExecute;
end;

procedure TdmSaveDoc.orsInsightError(Sender: TObject; E: EDAError;
  var Fail: Boolean);
var
   bLoginSetup: integer;
begin
   case E.ErrorCode of
      1005:    Fail := False;
      3113:    begin
                  Fail := False;
                  GetUserID();
               end;
      12541:   begin
                  frmLoginSetup := TfrmLoginSetup.Create(Self);
                  try
                     bLoginSetup := frmLoginSetup.ShowModal;
                  finally
                     frmLoginSetup.Free;
                     GetUserID();
                  end;
               end;
      12571:
           Fail := False;
      12505:  begin
                 Fail := False;
                 GetUserID();
              end;
      12560:  begin
                 Fail := False;

              end;
   else
      MessageDlg('Insight Database Error:'#13#10 + e.Message, mtError, [mbOK], 0);
   end;
end;

procedure TdmSaveDoc.qryMatterAttachmentsNewRecord(DataSet: TDataSet);
begin
   qryGetSeq.ExecSQL;
   FDocID := qryGetSeq.FieldByName('nextdoc').AsInteger;
   DataSet.FieldByName('docid').AsInteger := FDocID;
end;

procedure TdmSaveDoc.qrySaveEmailAttachmentsNewRecord(DataSet: TDataSet);
begin
   qryGetSeq.ExecSQL;
   AttDocID := qryGetSeq.FieldByName('nextdoc').AsString;
   DataSet.FieldByName('docid').AsString := AttDocID;
end;

function TdmSaveDoc.GetUserCode: string;
begin
   Result := TableString('employee','user_name', UserID,'code');
end;

function TdmSaveDoc.GetUserID: boolean;
var
  regAxiom: TRegistry;
  sRegistryRoot: string;
  NotSetup,
  bReturn: boolean;
begin
   NotSetup := False;
   bReturn  := True;
   sRegistryRoot := 'Software\Colateral\Axiom\SpeediDocs';
   regAxiom := TRegistry.Create;
   try
      if orsInsight <> nil then
      begin
         if (not orsInsight.Connected) then
         begin
            regAxiom.RootKey := HKEY_CURRENT_USER;
            if regAxiom.OpenKey(sRegistryRoot, False) then
            begin
               if (regAxiom.ReadString('Password') <> '') then
               begin
                  try
                     if orsInsight.Connected then
                        orsInsight.Disconnect;
                     if regAxiom.ReadString('Net') = 'Y' then
                        orsInsight.Options.Direct := True
                     else
                         orsInsight.Options.Direct := False;
                     orsInsight.Server := regAxiom.ReadString('Server Name');
                     orsInsight.Username := regAxiom.ReadString('User Name');
                     orsInsight.Password := regAxiom.ReadString('Password');
                     try
                        orsInsight.Connect;
                        UserID := UpperCase(regAxiom.ReadString('User Name'));
                     except
                       Application.MessageBox('Connection details not valid. Please correct...','Insight');
                       NotSetup := True;
                     end;
                  except
                     Application.MessageBox('Could not connect to Insight database.','Insight');
                     bReturn := False;
                  end;
               end
               else
               begin
                  Application.MessageBox('Connection details not valid. Please correct...','Insight');
                  NotSetup := True;
               end;
               regAxiom.CloseKey;

               if orsInsight.Connected = True then
               begin
                  with qryEmps do
                  begin
                     Close;
                     SQL.Text := 'SELECT CODE FROM EMPLOYEE WHERE upper(USER_NAME) = ' + quotedstr(uppercase(dmSaveDoc.UserID)) + ' AND ACTIVE = ''Y''';
                     Prepare;
                     Open;
                     // Make sure that the UserID is valid
                     if IsEmpty then
                     begin
                        Application.MessageBox('Failed to authenticate user.','Insight');
                        bReturn := False;
                     end;
                     Close;
                  end;

                  qryGetEntity.ParamByName('Emp').AsString := dmSaveDoc.UserID;
                  qryGetEntity.ParamByName('Owner').AsString := 'Desktop';
                  qryGetEntity.ParamByName('Item').AsString := 'Entity';
                  qryGetEntity.Open();
                  Entity := dmSaveDoc.qryGetEntity.FieldByName('value').AsString;
               end;
            end else
            begin
               Application.MessageBox('Connection details not recorded. Please enter...','Insight');
               NotSetup := True;
            end;
            if NotSetup then
            begin
               frmLoginSetup := TfrmLoginSetup.Create(Application);
               try
                  if frmLoginSetup.ShowModal = mrOK then
                     GetUserID();
               finally
                  frmLoginSetup.Free;
               end;
            end;
         end;
      end;
   finally
      regAxiom.Free;
   end;
   Result := bReturn;
end;

function TdmSaveDoc.SystemDate(sField: string): TDateTime;
begin
  with qrySysfile do
  begin
    SQL.Text := 'SELECT ' + sField + ' FROM SYSTEMFILE';
    Open;
    SystemDate := FieldByName(sField).AsDateTime;
    Close;
  end;
end;


function TdmSaveDoc.SystemInteger(sField: string): integer;
begin
  with qrySysfile do
  begin
    SQL.Text := 'SELECT ' + sField + ' FROM SYSTEMFILE';
    Open;
    SystemInteger := FieldByName(sField).AsInteger;
    Close;
  end;
end;


function TdmSaveDoc.SystemString(sField: string): string;
begin
   with qrySysfile do
   begin
      SQL.Text := 'SELECT ' + sField + ' FROM SYSTEMFILE';
      try
         Open;
         SystemString := FieldByName(sField).AsString;
         Close;
      except
      //
      end;
   end;
end;

function TdmSaveDoc.SystemFloat(sField: string): double;
begin
  with qrySysfile do
  begin
    SQL.Text := 'SELECT ' + sField + ' FROM SYSTEMFILE';
    Open;
    SystemFloat := FieldByName(sField).AsFloat;
    Close;
  end;
end;

function TdmSaveDoc.GetSeqNumber(sSequence : string) : string;
var
  sTmp : string;
begin
  sTmp := '';
  with qryTmp do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT ' + sSequence + '.NEXTVAL AS SQNC FROM DUAL');
      Open;
      if RecordCount > 0 then
        sTmp := FieldbyName('SQNC').AsString;
      Close;
    end;
  GetSeqNumber := sTmp;
end;

function TdmSaveDoc.GetEnvVar(const varName : string) : string;
var
  BufSize: Integer;  // buffer size required for value
begin
  // Get required buffer size (inc. terminal #0)
  BufSize := GetEnvironmentVariable(PChar(VarName), nil, 0);
  if BufSize > 0 then
  begin
    // Read env var value into result string
    SetLength(Result, BufSize - 1);
    GetEnvironmentVariable(PChar(VarName),PChar(Result), BufSize);
  end
  else
    // No such environment variable
    Result := '';
end;


end.
